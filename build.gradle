buildscript {
    repositories {
        mavenLocal()
        //jcenter()
        maven {
            url 'http://nexus.sdp.nd/nexus/content/groups/android-public/'
        }
        mavenCentral()
        //jcenter()
    }
    dependencies {
        classpath 'com.nd.sdp.android.im:gradle-hyacinth-push:3.7.189.4d85b1d'
        classpath 'com.github.znyang:library-analysis:0.2.3-rc8'
        classpath 'com.nd.sdp.android:apf-android-plugin-tool:2.0.5-master.1'
        classpath 'com.networkbench:tingyun-ea-agent-android-gradle-plugin:2.17.0'

        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.40'
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:1.3.40"

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def gradle_plugin_version = properties.getProperty('gradle_plugin_version')
        if(gradle_plugin_version == null || gradle_plugin_version.trim().isEmpty()){
            gradle_plugin_version = "3.6.4"
        }
        println ' -------------------------gradle_plugin_version ------------------------------------ is ' + gradle_plugin_version
        classpath "com.android.tools.build:gradle:${gradle_plugin_version}"
    }
}

allprojects {
    repositories {
        mavenLocal()
        maven { url 'http://nexus.sdp.nd/nexus/content/groups/android-public/' }
        mavenCentral()
        //jcenter()
    }
    //buildDir = "R:/${rootProject.name}/${project.name}/build"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//import groovy.json.JsonSlurper;

def bundleEnabled() {
    // 是否支持android app bundles
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def androidAppBundle = properties.getProperty('android_app_bundles')
    if (androidAppBundle != null && androidAppBundle.toBoolean()) {
        println ' ----------------------------isBundleEnabled---------------------------------------------- is ' + true
        return true
    }
    println ' ----------------------------isBundleEnabled---------------------------------------------- is ' + false
    return false
}

def getMinSdkVersion() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    // APP支持的最小系统版本号
    def setVersionMinSdk = properties.getProperty('versionMinSdk')
    // 默认最低版本为21
    def defaultMinSdk = 21
    println ' ------setVersionMinSdk local.properties old value------- is ' + setVersionMinSdk
    if (setVersionMinSdk == null || setVersionMinSdk.toString().trim().equals("") || !setVersionMinSdk.toString().isInteger()) {
        setVersionMinSdk = defaultMinSdk
    }
    setVersionMinSdk = setVersionMinSdk.toInteger()


    def versionMinSdk = defaultMinSdk
    if (setVersionMinSdk > defaultMinSdk) {
        versionMinSdk = setVersionMinSdk
    }
    // 如果开启android app bundles则最低版本为21
    if (isBundleEnabled && versionMinSdk < 21) {
        versionMinSdk = 21
    }
    println ' ------getMinSdkVersion last minSdkVersion------- is ' + versionMinSdk
    return versionMinSdk
}

def getTargetSdkVersion() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    // 目标版本
    def setTargetSdkVersion = properties.getProperty('targetSdkVersion')
    println ' ------setTargetSdkVersion local.properties old value------- is ' + setTargetSdkVersion
    def targetSdkVersion = 23.toInteger()

    if (setTargetSdkVersion == null || setTargetSdkVersion.toString().trim().equals("") || !setTargetSdkVersion.toString().isInteger()) {
        println ' ------setTargetSdkVersion 不能转换成数字 使用默认值：' + targetSdkVersion
    } else {
        targetSdkVersion = setTargetSdkVersion.toInteger()
        println "TargetSdk设置成功，当前TargetSdkVersion: " + targetSdkVersion
    }

    def minSdkVersion = getMinSdkVersion()
    if (minSdkVersion > targetSdkVersion) {
        targetSdkVersion = minSdkVersion
    }
    // 如果开启android app bundles则目标版本最低为28
    if (isBundleEnabled && targetSdkVersion < 28) {
        targetSdkVersion = 28
    }
    return targetSdkVersion
}

def getBuildToolsVersion() {
    def compileSdkVersion = getTargetSdkVersion()
    def buildToolVersion = '28.0.3'
    if (compileSdkVersion == 28) {
        buildToolVersion = '28.0.3'
    } else if (compileSdkVersion == 29) {
        buildToolVersion = '29.0.3'
    } else if (compileSdkVersion == 30) {
        buildToolVersion = '30.0.3'
    } else if (compileSdkVersion == 31) {
        buildToolVersion = '31.0.0'
    }

    println "当前buildToolVersion: " + buildToolVersion
    return buildToolVersion
}

import groovy.json.JsonSlurper;
def getIsClassScan() {
    try {
        //判断组件是工程测试，集成测试还是应用，如果是应用返回false，否则返回true
        def file = project.rootProject.file("app/assets/app_factory/app/app.json");
        if (!file.exists()) {
            return;
        }
        def text = file.getText();
        def slurper = new JsonSlurper();
        def app = slurper.parseText(text);
        assert app instanceof Map;
        return (0 == "component_function".compareTo(app.scope) || 0 == "component_integration".compareTo(app.scope));
    } catch (java.lang.Exception e) {
        println "判断组件是工程测试，集成测试还是应用: " + e.getMessage()
        return true
    }
}

ext {
    isBundleEnabled = bundleEnabled()
    minSdkVersion = getMinSdkVersion()

    // 原则上这三者版本尽量保持一致，以获得最好的外观和行为
    targetSdkVersion = getTargetSdkVersion()
    compileSdkVersion = targetSdkVersion
    buildToolsVersion = getBuildToolsVersion()

    isComponentTest = getIsClassScan() //除了模板工程本身，公共脚本也会用到，请勿随意删除或变更
}